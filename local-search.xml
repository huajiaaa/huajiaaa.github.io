<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Prometheus tsdb</title>
    <link href="/2020/11/29/Prometheus-tsdb/"/>
    <url>/2020/11/29/Prometheus-tsdb/</url>
    
    <content type="html"><![CDATA[<p>Prometheus 把监控数据存在本地磁盘的时间序列数据库中（ time series database, tsdb）, 同时也支持集成远程存储系统.</p><p>Prometheus 的 tsdb 经历过两次大升级,  从 v1 升到 v2 , 从 v2 升到 v3, 其中每次升级都比原来的版本有着巨大的改善.</p><p>目前最新的版本是 v3 tsdb ,  本文将对其进行介绍,</p><p>希望读者在读完本文后, 对 prometheus tsdb 整体设计能有比较清晰的认知、对自己感兴趣的实现细节能有一定的理解.</p><a id="more"></a><p>备注: 本文的内容是综合资料介绍以及个人理解总结出来的, 如果有理解不对或不准确的情况, 希望读者们能不吝指出.</p><h1 id="数据库的选择-设计理念-amp-Prometheus-的场景需求"><a href="#数据库的选择-设计理念-amp-Prometheus-的场景需求" class="headerlink" title="数据库的选择/设计理念 &amp; Prometheus 的场景需求"></a>数据库的选择/设计理念 &amp; Prometheus 的场景需求</h1><h2 id="理念"><a href="#理念" class="headerlink" title="理念"></a><strong>理念</strong></h2><p><strong>该选择哪款数据库, 或者一个数据库被设计成什么样, 取决与预期怎么使用它(场景).</strong> </p><h2 id="Prometheus-的场景"><a href="#Prometheus-的场景" class="headerlink" title="Prometheus 的场景"></a>Prometheus 的场景</h2><h3 id="样本点格式介绍"><a href="#样本点格式介绍" class="headerlink" title="样本点格式介绍"></a>样本点格式介绍</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">identifier -&gt; (<span class="hljs-built_in">t0</span>, <span class="hljs-built_in">v0</span>), (<span class="hljs-built_in">t1</span>, <span class="hljs-built_in">v1</span>), (<span class="hljs-built_in">t2</span>, v2), (<span class="hljs-built_in">t3</span>, v3), ....<br></code></pre></td></tr></table></figure><p>其中,</p><ul><li><p>identifier 是一个 metric name 以及其所有标签的键值对, 例如： requests_total{path=”/status”, method=”GET”, instance=”10.0.0.1:80”} </p></li><li><p>ti 表示时间点</p></li><li><p>vi 表示 ti 时刻该 identifier 的取值</p></li></ul><p>metric name 也被视为一个标签, 用\ _<em>${metricName}_\</em> 表示, 因此上述例子也可以表示为：{__name__=”requests_total”, path=”/status”, method=”GET”, instance=”10.0.0.1:80”}</p><h3 id="场景需求"><a href="#场景需求" class="headerlink" title="场景需求"></a>场景需求</h3><p><img src="https://raw.githubusercontent.com/huajiaaa/huajiaaa.github.io/master/picture/prometheus%E8%AF%BB%E5%86%99%E7%A4%BA%E6%84%8F%E5%9B%BE.png" srcset="/img/loading.gif" lazyload alt></p><p>如上图所示, 其中, 横轴是时间 t, 纵轴是 identifier, 平面上的点是 v：</p><ol><li>写需求<ol><li>特别特别密集. 预期中, 一台 Prometheus 实例每秒钟应该能收集百万级别的样本点</li><li>只是纵向的写</li></ol></li><li>读需求<ol><li>相比于写, 读需求很少</li><li>对 Latency 要求较高</li><li>有按时间范围查询的需求, 且一般会涉及多个 identifier 的查询</li><li>越新的数据越有价值, 查询的需求也越高</li></ol></li></ol><h4 id="k8s-环境下特有的现象——-series-churn"><a href="#k8s-环境下特有的现象——-series-churn" class="headerlink" title="k8s 环境下特有的现象—— series churn"></a>k8s 环境下特有的现象—— series churn</h4><p>通常, metric 中都会有 instance 标签. 而在 k8s 环境下, 由于 pod 是经常变化的（比如滚动升级时）, 会导致「series churn」（不会翻译就不翻译了）, 如下图所示（即很多老 series 其实是不需要的）：</p><p><img src="https://raw.githubusercontent.com/huajiaaa/huajiaaa.github.io/master/picture/series-churn.png" srcset="/img/loading.gif" lazyload alt></p><p>介绍完了 Prometheus 的场景特点以及对数据库的使用需求, 接下来介绍 Prometheus 所使用的 tsdb 是怎样做的.</p><h1 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h1><p><img src="https://ganeshvernekar.com/blog/img/tsdb1.svg" srcset="/img/loading.gif" lazyload alt></p><p>其中, </p><ul><li>(t, v) 即为采集的一个样本点（sample）                                                                </li><li>Head block 在内存中</li><li>灰色的 block 在磁盘中（并且是不可变的）</li><li>M-map 为磁盘中两个小时以内的数据在内存中的映射</li><li>WAL 是预写日志（Write-ahead logging）</li></ul><p><strong>接下来对监控样本点的生命周期进行简单介绍.</strong></p><h1 id="样本点的生命周期"><a href="#样本点的生命周期" class="headerlink" title="样本点的生命周期"></a>样本点的生命周期</h1><p>Prometheus 新采集的样本都会存到 Head block, 其中每一个 series 会存到唯一对应的压缩单元(即 chunk) 里. 为了防止 Prometheus 挂了导致内存中的数据丢失, 新采集到的数据还会写到预写日志中.如下图：</p><p><img src="https://ganeshvernekar.com/blog/img/tsdb2.svg" srcset="/img/loading.gif" lazyload alt></p><p>备注：样本点在存入 chunk 时, 通过 labels 的哈希值来获得或创建对应的 series chunk. </p><p><strong>当 chunk 中存了 120 个样本或该 chunk 已满 2h 时, 将创建出一个新的 chunk, 老的 chunk 视为 “已满”.</strong></p><p>ps: 如果 15s 采集一次, 则每 30min 会满一次.</p><p>如下图所示: 红色的是新创建的 chunk, 黄色的是老的 chunk.</p><p><img src="https://ganeshvernekar.com/blog/img/tsdb4.svg" srcset="/img/loading.gif" lazyload alt></p><p>自 Prometheus v2.19.0 之后（我们目前使用的是 v2.20.0）, 当一个 chunk “已满” 时, 它就会被刷新到磁盘中, 并从磁盘中进行内存映射（memory-map）, 仅在内存中存储一个它的引用. 有了内存映射, 可以再需要的时候通过引用动态地将 chunk 加载到内存中, 这是操作系统提供的特性, 参考: <a href="https://en.wikipedia.org/wiki/Mmap" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Mmap</a>.</p><p><img src="https://ganeshvernekar.com/blog/img/tsdb8.svg" srcset="/img/loading.gif" lazyload alt></p><p><img src="https://ganeshvernekar.com/blog/img/tsdb9.svg" srcset="/img/loading.gif" lazyload alt></p><p>当 Head 中的数据跨度达到 3h 时（mmap 中数据的时间跨度）, 则最久的两个小时的数据(即上图的 1~4)将被压缩成一个 persistent block.</p><p>此时, 相关的 WAL 和索引数据也被删除.</p><p>再看一次这个图：</p><p><img src="https://ganeshvernekar.com/blog/img/tsdb1.svg" srcset="/img/loading.gif" lazyload alt></p><p>每个 block 是按时间序列排序的. 当查询多个 block 中, 会从很多 block 中读出对应的数据, 然后再合并成一个整体的结果, 这个合并过程显然是有代价的.</p><p>因此引入了压缩(<em>compaction</em>)操作：即将一个或多个 block 合并成一个更大的 block. 在压缩的过程中还可以修改现有数据, 例如删除「已被删除」的数据, 或者重新构造样本块以提高查询性能.</p><p>压缩的时机与设定的步长有关: 假设 block 为保存 2h 的数据, 如果步长设置为 3, 则会将三个 2h 的合成一个 6h 的block, 将三个 6h 的合成一个 18h 的block.</p><p>当 block 中存储的数据达到了所设置的最大保留时间时, 它们即会被删除.</p><p><strong>以上就是关于监控样本点的生命周期的简单介绍.</strong></p><h1 id="磁盘上的数据格式"><a href="#磁盘上的数据格式" class="headerlink" title="磁盘上的数据格式"></a>磁盘上的数据格式</h1><p>本节将分别对 Head Block 和 block 进行介绍.</p><h2 id="Head-block"><a href="#Head-block" class="headerlink" title="Head block"></a>Head block</h2><h3 id="File"><a href="#File" class="headerlink" title="File"></a>File</h3><p>上文介绍的 mmap 中的 chunks 保存在名为 chunks_head 的目录下, 文件序列与 WAL 中的相似. 如下图:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs undefined">data<br>├── chunks_head<br>|   ├── <span class="hljs-number">000001</span><br>|   └── <span class="hljs-number">000002</span><br>└── wal<br>    ├── checkpoint<span class="hljs-number">.000003</span><br>    |   ├── <span class="hljs-number">000000</span><br>    |   └── <span class="hljs-number">000001</span><br>    ├── <span class="hljs-number">000004</span><br>    └── <span class="hljs-number">000005</span><br></code></pre></td></tr></table></figure><p>其中, 文件（比如上图中的 000001）的 最大 size 是 128M. 每个的文件格式如下所示: </p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs undefined">┌──────────────────────────────┐<br>│  magic(<span class="hljs-number">0x0130BC91</span>) &lt;<span class="hljs-number">4</span> byte&gt;  │<br>├──────────────────────────────┤<br>│    version(<span class="hljs-number">1</span>) &lt;<span class="hljs-number">1</span> byte&gt;       │<br>├──────────────────────────────┤<br>│    padding(<span class="hljs-number">0</span>) &lt;<span class="hljs-number">3</span> byte&gt;       │<br>├──────────────────────────────┤<br>│ ┌──────────────────────────┐ │<br>│ │         Chunk <span class="hljs-number">1</span>          │ │<br>│ ├──────────────────────────┤ │<br>│ │          ...             │ │<br>│ ├──────────────────────────┤ │<br>│ │         Chunk N          │ │<br>│ └──────────────────────────┘ │<br>└──────────────────────────────┘<br></code></pre></td></tr></table></figure><p>其中. </p><ul><li>magic number 是可以唯一标识一个文件时 head_chunk 的数字 (类似 Java 中的咖啡宝贝..)</li><li>version 告诉我们如何解码文件中的 chunks (version 怎么告诉我们如何解码？version 其实是编码/格式的版本)</li><li>padding 是为了将来可能需要的选项而预留出来的</li></ul><p>备注：magic 在接下来其他的数据格式中会多次出现, 用途一致, 就不赘述了.</p><h3 id="Chunk"><a href="#Chunk" class="headerlink" title="Chunk"></a>Chunk</h3><p>一个 chunk 的格式如下所示：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">┌─────────────────────┬───────────────────────┬───────────────────────┬───────────────────┬───────────────┬──────────────┬────────────────┐<br>| series ref &lt;<span class="hljs-number">8</span> <span class="hljs-keyword">byte</span>&gt; | mint &lt;<span class="hljs-number">8</span> <span class="hljs-keyword">byte</span>, <span class="hljs-keyword">uint64</span>&gt; | maxt &lt;<span class="hljs-number">8</span> <span class="hljs-keyword">byte</span>, <span class="hljs-keyword">uint64</span>&gt; | encoding &lt;<span class="hljs-number">1</span> <span class="hljs-keyword">byte</span>&gt; | <span class="hljs-built_in">len</span> &lt;uvarint&gt; | data &lt;bytes&gt; │ CRC32 &lt;<span class="hljs-number">4</span> <span class="hljs-keyword">byte</span>&gt; │<br>└─────────────────────┴───────────────────────┴───────────────────────┴───────────────────┴───────────────┴──────────────┴────────────────┘<br></code></pre></td></tr></table></figure><p>其中, </p><ul><li>series ref 是用于访问内存中的序列的 id, 即上文中 mmap 中的引用</li><li>mint 是该 chunk 中 series 的最小时间戳</li><li>max 是该 chunk 中 series 的最大时间戳</li><li>encoding 是压缩该 chunk 时使用的编码</li><li>len 是此后的字节数</li><li>data 是压缩后的数据</li><li>CRC32 是用于检查数据完整性的校验和</li></ul><p>Head Block 通过 series ref, 以及 mint、maxt 就可以实现不访问磁盘就选择 chunk.</p><p>其中, ref 是 8 bytes, 前 4 个字节告诉了 chunk 存在哪个文件中（file number）， 后四个字节告诉了 chunk 在该文件中的偏移量.</p><h2 id="Persistent-Block"><a href="#Persistent-Block" class="headerlink" title="Persistent Block"></a>Persistent Block</h2><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs undefined">data<br>├── 01EM6Q6A1YPX4G9TEB20J22B2R<br>|<span class="hljs-string">   ├── chunks<br></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   ├── 000001<br></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   └── 000002<br></span>|<span class="hljs-string">   ├── index<br></span>|<span class="hljs-string">   ├── meta.json<br></span>|<span class="hljs-string">   └── tombstones<br>├── chunks_head<br></span>|<span class="hljs-string">   ├── 000001<br></span>|<span class="hljs-string">   └── 000002<br>└── wal<br>    ├── checkpoint.000003<br>    </span>|<span class="hljs-string">   ├── 000000<br>    </span>|<span class="hljs-string">   └── 000001<br>    ├── 000004<br>    └── 000005</span><br></code></pre></td></tr></table></figure><p>上图中的 01EM6Q6A1YPX4G9TEB20J22B2R 即是一个 Persistent Block.</p><p>其中, </p><ul><li>meta.json：block 的元信息</li><li>chunks：chunk 的原始数据</li><li>index：block 的索引</li><li>tombstones：删除标记, 用于查询该 block 时排除样本</li><li>01EM6Q6A1YPX4G9TEB20J22B2R：block id （与 UUID 主要的区别是它是字典序的, 见<a href="https://github.com/oklog/ulid）" target="_blank" rel="noopener">https://github.com/oklog/ulid）</a></li></ul><p>接下来分别进行介绍.</p><h3 id="meta-json"><a href="#meta-json" class="headerlink" title="meta.json"></a>meta.json</h3><p>meta 中包含了整个 block 所需的所有元数据,  如下图：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&#123;<br>    <span class="hljs-attr">"ulid"</span>: <span class="hljs-string">"01EM6Q6A1YPX4G9TEB20J22B2R"</span>,<br>    <span class="hljs-attr">"minTime"</span>: <span class="hljs-number">1602237600000</span>,<br>    <span class="hljs-attr">"maxTime"</span>: <span class="hljs-number">1602244800000</span>,<br>    <span class="hljs-attr">"stats"</span>: &#123;<br>        <span class="hljs-attr">"numSamples"</span>: <span class="hljs-number">553673232</span>,<br>        <span class="hljs-attr">"numSeries"</span>: <span class="hljs-number">1346066</span>,<br>        <span class="hljs-attr">"numChunks"</span>: <span class="hljs-number">4440437</span><br>    &#125;,<br>    <span class="hljs-attr">"compaction"</span>: &#123;<br>        <span class="hljs-attr">"level"</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">"sources"</span>: [<br>            <span class="hljs-string">"01EM65SHSX4VARXBBHBF0M0FDS"</span>,<br>            <span class="hljs-string">"01EM6GAJSYWSQQRDY782EA5ZPN"</span><br>        ]<br>    &#125;,<br>    <span class="hljs-attr">"version"</span>: <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>其中, </p><ul><li>version：索引格式的版本，告诉我们如何解析该 meta 文件</li><li>ulid：尽管该 block 的目录名是 ULID, 但是实际上已 meta 中的 ulid 为准，目录名可以是任何名称.</li><li>minTime/maxTime：该 block 中所有 chunk 的 min 和 max 时间戳</li><li>stats：该 block 中存储的时间序列、样本和 chunk 的数量</li><li>compaction：该 block 的历史<ul><li>level：该 block 多少代了</li><li>sources：由哪些 blocks 合并而成, 如果是从 Head block 创建来的, 则 sources 设置为自己的 ULID</li></ul></li></ul><h3 id="Chunks"><a href="#Chunks" class="headerlink" title="Chunks"></a>Chunks</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs undefined">┌──────────────────────────────┐<br>│  magic(<span class="hljs-number">0x85BD40DD</span>) &lt;<span class="hljs-number">4</span> byte&gt;  │<br>├──────────────────────────────┤<br>│    version(<span class="hljs-number">1</span>) &lt;<span class="hljs-number">1</span> byte&gt;       │<br>├──────────────────────────────┤<br>│    padding(<span class="hljs-number">0</span>) &lt;<span class="hljs-number">3</span> byte&gt;       │<br>├──────────────────────────────┤<br>│ ┌──────────────────────────┐ │<br>│ │         Chunk <span class="hljs-number">1</span>          │ │<br>│ ├──────────────────────────┤ │<br>│ │          ...             │ │<br>│ ├──────────────────────────┤ │<br>│ │         Chunk N          │ │<br>│ └──────────────────────────┘ │<br>└──────────────────────────────┘<br></code></pre></td></tr></table></figure><p>与 Head 中的文件格式差不多, 不赘述了. 但有个区别是 Head 中的 file 最大 size 是 128M, 这里的 file 最大是 512M.</p><p>每个 chunk 的格式如下图所示：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">┌───────────────┬───────────────────┬──────────────┬────────────────┐<br>│ len &lt;uvarint&gt; │ encoding &lt;<span class="hljs-number">1</span> <span class="hljs-keyword">byte&gt; </span>│ <span class="hljs-meta">data</span> &lt;<span class="hljs-keyword">bytes&gt; </span>│ CRC32 &lt;<span class="hljs-number">4</span> <span class="hljs-keyword">byte&gt; </span>│<br>└───────────────┴───────────────────┴──────────────┴────────────────┘<br></code></pre></td></tr></table></figure><p>与 head_chunk 差不多, 区别是少了 series ref、mint、maxt. 在 Head_chunk 中需要这些附加信息是为了 prometheus 重启时能够创建内存索引, 但是在持久化 block 中, 这些信息在 index 文件中存储了, 因此不再需要.<br>同样通过 reference 来访问这些 chunk. </p><h3 id="index"><a href="#index" class="headerlink" title="index"></a>index</h3><p>index 是倒排索引, 它包含了查询该 block 所需要的所有信息. 它不与任何其它 block 或外部实体共享数据, 这使得可以在没有任何依赖的情况下读取/查询该 block.(这个结构比较复杂, 但不要慌 : ))</p><p>它的宏观视图如下所示：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs undefined">┌────────────────────────────┬─────────────────────┐<br>│ magic(<span class="hljs-number">0xBAAAD700</span>) &lt;<span class="hljs-number">4</span>b&gt;     │ version(<span class="hljs-number">1</span>) &lt;<span class="hljs-number">1</span> byte&gt; │<br>├────────────────────────────┴─────────────────────┤<br>│ ┌──────────────────────────────────────────────┐ │<br>│ │                 <span class="hljs-keyword">Symbol</span> <span class="hljs-keyword">Table</span>                 │ │<br>│ ├──────────────────────────────────────────────┤ │<br>│ │                    <span class="hljs-keyword">Series</span>                    │ │<br>│ ├──────────────────────────────────────────────┤ │<br>│ │                 <span class="hljs-keyword">Label</span> Index <span class="hljs-number">1</span>                │ │<br>│ ├──────────────────────────────────────────────┤ │<br>│ │                      ...                     │ │<br>│ ├──────────────────────────────────────────────┤ │<br>│ │                 <span class="hljs-keyword">Label</span> Index N                │ │<br>│ ├──────────────────────────────────────────────┤ │<br>│ │                   Postings <span class="hljs-number">1</span>                 │ │<br>│ ├──────────────────────────────────────────────┤ │<br>│ │                      ...                     │ │<br>│ ├──────────────────────────────────────────────┤ │<br>│ │                   Postings N                 │ │<br>│ ├──────────────────────────────────────────────┤ │<br>│ │              <span class="hljs-keyword">Label</span> <span class="hljs-keyword">Offset</span> <span class="hljs-keyword">Table</span>              │ │<br>│ ├──────────────────────────────────────────────┤ │<br>│ │             Postings <span class="hljs-keyword">Offset</span> <span class="hljs-keyword">Table</span>            │ │<br>│ ├──────────────────────────────────────────────┤ │<br>│ │                      TOC                     │ │<br>│ └──────────────────────────────────────────────┘ │<br>└──────────────────────────────────────────────────┘<br></code></pre></td></tr></table></figure><p>其中,</p><ul><li>magic：用来唯一标识某个文件是 index 文件</li><li>version：告诉我们如何解析该文件</li><li>TOC：是该 index 文件的入口处（就像目录一样, 记录了各部分的页码）</li></ul><h4 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h4><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs undefined">┌─────────────────────────────────────────┐<br>│ <span class="hljs-built_in">ref</span>(symbols) &lt;<span class="hljs-number">8</span>b&gt;                       │ -&gt; <span class="hljs-type">Symbol</span> <span class="hljs-type">Table</span><br>├─────────────────────────────────────────┤<br>│ <span class="hljs-built_in">ref</span>(series) &lt;<span class="hljs-number">8</span>b&gt;                        │ -&gt; <span class="hljs-type">Series</span><br>├─────────────────────────────────────────┤<br>│ <span class="hljs-built_in">ref</span>(label indices start) &lt;<span class="hljs-number">8</span>b&gt;           │ -&gt; <span class="hljs-type">Label</span> <span class="hljs-type">Index</span> <span class="hljs-number">1</span><br>├─────────────────────────────────────────┤<br>│ <span class="hljs-built_in">ref</span>(label offset table) &lt;<span class="hljs-number">8</span>b&gt;            │ -&gt; <span class="hljs-type">Label</span> <span class="hljs-type">Offset</span> <span class="hljs-type">Table</span><br>├─────────────────────────────────────────┤<br>│ <span class="hljs-built_in">ref</span>(postings start) &lt;<span class="hljs-number">8</span>b&gt;                │ -&gt; <span class="hljs-type">Postings</span> <span class="hljs-number">1</span><br>├─────────────────────────────────────────┤<br>│ <span class="hljs-built_in">ref</span>(postings offset table) &lt;<span class="hljs-number">8</span>b&gt;         │ -&gt; <span class="hljs-type">Postings</span> <span class="hljs-type">Offset</span> <span class="hljs-type">Table</span><br>├─────────────────────────────────────────┤<br>│ <span class="hljs-type">CRC32</span> &lt;<span class="hljs-number">4</span>b&gt;                              │<br>└─────────────────────────────────────────┘<br></code></pre></td></tr></table></figure><p>格式如上图所示, 主要是告诉我们各索引开始的位置.</p><p>TOC 是固定大小的，因此文件的最后 52 个字节就是 TOC.</p><h4 id="Symbol-Table"><a href="#Symbol-Table" class="headerlink" title="Symbol Table"></a><code>Symbol Table</code></h4><p><code>符号表,</code>记录了所有 series 的标签和值的字符串的非重复有序列表.<br>比如 一个 series 是 {a=”y”, x=”b”}, 则符号会是 “a”, “b”, “x”, “y”  .</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs undefined">┌────────────────────┬─────────────────────┐<br>│ <span class="hljs-built_in">len</span> <span class="hljs-symbol">&lt;4b&gt;</span>           │ #symbols <span class="hljs-symbol">&lt;4b&gt;</span>       │<br>├────────────────────┴─────────────────────┤<br>│ ┌──────────────────────┬───────────────┐ │<br>│ │ <span class="hljs-built_in">len</span>(str_1) <span class="hljs-symbol">&lt;uvarint&gt;</span> │ str_1 <span class="hljs-symbol">&lt;bytes&gt;</span> │ │<br>│ ├──────────────────────┴───────────────┤ │<br>│ │                . . .                 │ │<br>│ ├──────────────────────┬───────────────┤ │<br>│ │ <span class="hljs-built_in">len</span>(str_n) <span class="hljs-symbol">&lt;uvarint&gt;</span> │ str_n <span class="hljs-symbol">&lt;bytes&gt;</span> │ │<br>│ └──────────────────────┴───────────────┘ │<br>├──────────────────────────────────────────┤<br>│ CRC32 <span class="hljs-symbol">&lt;4b&gt;</span>                               │<br>└──────────────────────────────────────────┘<br></code></pre></td></tr></table></figure><p>len：该部分的字节数<br>symbols：符号的数量<br>str_i：utf8 编码的字符串, 每个字符串前都有 len 前缀;  随后是字符串的原始值<br>索引中的其他部分可以为任何字符串引用此符号表, 由此减小 index 的大小. （通过偏移量 str_i 引用, 当需要实际的字符串时, 则通过偏移量从表中获取）</p><h4 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs undefined">┌───────────────────────────────────────┐<br>│ ┌───────────────────────────────────┐ │<br>│ │   series_1                        │ │<br>│ ├───────────────────────────────────┤ │<br>│ │                 . . .             │ │<br>│ ├───────────────────────────────────┤ │<br>│ │   series_n                        │ │<br>│ └───────────────────────────────────┘ │<br>└───────────────────────────────────────┘<br></code></pre></td></tr></table></figure><p>此部分存了当前 block 中所有 series 的信息, 按照标签的字典序排序.</p><p>每个 series 都是 16 byte 对齐的, 使得 series 开始处的偏移量能够被 16 整除. 因此,将 series 的 id 设置为 offset/16, offset 指向 series 的开头. 每当要访问某个 series 时, 可以直接通过 id * 16 来获取在 index 中的位置.</p><h4 id="Label-Offset-Table-amp-Label-Index-i"><a href="#Label-Offset-Table-amp-Label-Index-i" class="headerlink" title="Label Offset Table &amp; Label Index i"></a>Label Offset Table &amp; Label Index i</h4><p>这两个是耦合的, 因此应该放在一起介绍. </p><p>但是, 目前这两个已经不再使用, 只是为了向后兼容而编写的. 所以本文暂且没有介绍.</p><h4 id="Postings-Offset-Table-amp-Postings-i"><a href="#Postings-Offset-Table-amp-Postings-i" class="headerlink" title="Postings Offset Table &amp; Postings i"></a>Postings Offset Table &amp; Postings i</h4><h5 id="Postings-i"><a href="#Postings-i" class="headerlink" title="Postings i"></a>Postings i</h5><p>posting 其实就是 series id. (之所以叫 posting 其实是因为在倒排索引的 “世界” 里, 文档 id 常被成为 posting, 而在当前的场景下, 一个 series 可以被视为一个文档, 因此把 series id 当做 posting.) 单个 posting 其实代表了一个 posting list, 其格式如下所示:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs undefined">┌────────────────────┬────────────────────┐<br>│ <span class="hljs-built_in">len</span> <span class="hljs-symbol">&lt;4b&gt;</span>           │ #entries <span class="hljs-symbol">&lt;4b&gt;</span>      │<br>├────────────────────┴────────────────────┤<br>│ ┌─────────────────────────────────────┐ │<br>│ │ ref(series_1) <span class="hljs-symbol">&lt;4b&gt;</span>                  │ │<br>│ ├─────────────────────────────────────┤ │<br>│ │ ...                                 │ │<br>│ ├─────────────────────────────────────┤ │<br>│ │ ref(series_n) <span class="hljs-symbol">&lt;4b&gt;</span>                  │ │<br>│ └─────────────────────────────────────┘ │<br>├─────────────────────────────────────────┤<br>│ CRC32 <span class="hljs-symbol">&lt;4b&gt;</span>                              │<br>└─────────────────────────────────────────┘<br></code></pre></td></tr></table></figure><p>其中, len 和 CRC32 的作用大家都已经很熟悉了. entries 是该 list 中的 posting 数量; 其次是 entries 个有序的 posting（即 series id, 即引用）.</p><p>posting list 中存储的内容介绍：</p><p>假设有两个时间序列:</p><ol><li>{a=”b”, x=”y1”} with series ID 120</li><li>{a=”b”, x=”y2”} with series ID 145</li></ol><p>可以看到 a=”b” 出现在两个 series 中, ; 而 x=”y1”, x=”y2” 分别各自出现在一个 series 中.</p><p>此时 posting list 中会存:</p><p>posting 1：   // a=”b” 在两个 series 都出现了</p><ul><li>120</li><li>145</li></ul><p>posting 2：//x =”y1”</p><ul><li>120</li></ul><p>posting 3:  //x =”y2”</p><ul><li>145</li></ul><h5 id="Postings-Offset-Table"><a href="#Postings-Offset-Table" class="headerlink" title="Postings Offset Table"></a>Postings Offset Table</h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs undefined">┌─────────────────────┬──────────────────────┐<br>│ <span class="hljs-built_in">len</span> <span class="hljs-symbol">&lt;4b&gt;</span>            │ #entries <span class="hljs-symbol">&lt;4b&gt;</span>        │<br>├─────────────────────┴──────────────────────┤<br>│ ┌────────────────────────────────────────┐ │<br>│ │  n = <span class="hljs-number">2</span> <span class="hljs-symbol">&lt;1b&gt;</span>                            │ │<br>│ ├──────────────────────┬─────────────────┤ │<br>│ │ <span class="hljs-built_in">len</span>(name) <span class="hljs-symbol">&lt;uvarint&gt;</span>  │ name <span class="hljs-symbol">&lt;bytes&gt;</span>    │ │<br>│ ├──────────────────────┼─────────────────┤ │<br>│ │ <span class="hljs-built_in">len</span>(value) <span class="hljs-symbol">&lt;uvarint&gt;</span> │ value <span class="hljs-symbol">&lt;bytes&gt;</span>   │ │<br>│ ├──────────────────────┴─────────────────┤ │<br>│ │  offset <span class="hljs-symbol">&lt;uvarint64&gt;</span>                    │ │<br>│ └────────────────────────────────────────┘ │<br>│                    . . .                   │<br>├────────────────────────────────────────────┤<br>│  CRC32 <span class="hljs-symbol">&lt;4b&gt;</span>                                │<br>└────────────────────────────────────────────┘<br></code></pre></td></tr></table></figure><p>其中, len 和 CRC32 的作用大家都已经很熟悉了. entries 是该表中的条目数.</p><p>n 永远是 2, 代表了接下来字符串的数量（label name 和 label value 俩字符串）.</p><p>接下来是 label name 和 label value 的原始值. <strong>由于标签对通常并不多, 因此能够负担得起在此处存储原始字符串</strong>，从而避免间接访问符号表（符号表的主要用途在于被 Series 部分使用）. PS：我们公司目前的标签对还是很多的.</p><p>offset 代表了该键值对在 postings list 中的偏移量.</p><p>以上述例子中,</p><ul><li>name=”a”, value=”b” 的偏移量将指向 posting list 中的 [120, 145]</li><li>name=”x”, value=”y1” 的偏移量将指向 posting list 中的 [120]</li></ul><p>Postings Offset Table 中的条目是根据 label name 和 label value 排序的, 因此可以对所需的标签对进行二分查找（这也是此处存储实际字符串以便于更快访问标签值的另一个原因）.</p><p>postings list 与 postings offset table 构成了倒排索引.</p><h3 id="tombstones"><a href="#tombstones" class="headerlink" title="tombstones"></a>tombstones</h3><p> Tombstones（墓碑） 是删除标记, 它告诉我们在读取/查询时可以忽略哪个 time series 的哪段时间范围. </p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs undefined">┌────────────────────────────┬─────────────────────┐<br>│ magic(<span class="hljs-number">0x0130BA30</span>) &lt;<span class="hljs-number">4</span>b&gt;     │ version(<span class="hljs-number">1</span>) &lt;<span class="hljs-number">1</span> byte&gt; │<br>├────────────────────────────┴─────────────────────┤<br>│ ┌──────────────────────────────────────────────┐ │<br>│ │                Tombstone <span class="hljs-number">1</span>                   │ │<br>│ ├──────────────────────────────────────────────┤ │<br>│ │                      ...                     │ │<br>│ ├──────────────────────────────────────────────┤ │<br>│ │                Tombstone N                   │ │<br>│ ├──────────────────────────────────────────────┤ │<br>│ │                  CRC&lt;<span class="hljs-number">4</span>b&gt;                     │ │<br>│ └──────────────────────────────────────────────┘ │<br>└──────────────────────────────────────────────────┘<br></code></pre></td></tr></table></figure><p>magic、version、CRC 的作用大家都很熟悉了.</p><p>Tombstone 的格式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">┌────────────────────────┬─────────────────┬─────────────────┐<br>│ series ref <span class="hljs-tag">&lt;<span class="hljs-name">uvarint64</span>&gt;</span> │ mint <span class="hljs-tag">&lt;<span class="hljs-name">varint64</span>&gt;</span> │ maxt <span class="hljs-tag">&lt;<span class="hljs-name">varint64</span>&gt;</span> │<br>└────────────────────────┴─────────────────┴─────────────────┘<br></code></pre></td></tr></table></figure><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><p>还有一些内容也属于 tsdb 中需要了解的范畴, 比如<a href="https://confluence.zhenguanyu.com/www.vldb.org/pvldb/vol8/p1816-teller.pdf" target="_blank" rel="noopener">数据压缩的方法</a>等, 但不是目前必须要知道的内容, 因此本文中暂时没有介绍, 感兴趣的话可以自行去了解.</p><h1 id="结合上述分析和部分源码-查询-tsdb-时发生了什么？"><a href="#结合上述分析和部分源码-查询-tsdb-时发生了什么？" class="headerlink" title="结合上述分析和部分源码, 查询 tsdb 时发生了什么？"></a>结合上述分析和部分源码, 查询 tsdb 时发生了什么？</h1><h2 id="前置介绍"><a href="#前置介绍" class="headerlink" title="前置介绍"></a>前置介绍</h2><h3 id="一个-Block-即是一个-NewBlockQuerier"><a href="#一个-Block-即是一个-NewBlockQuerier" class="headerlink" title="一个 Block 即是一个 NewBlockQuerier."></a>一个 Block 即是一个 NewBlockQuerier.</h3><p>见下 1424 行.</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// Querier returns a new querier over the data partition for the given time range.</span><br>func (db *DB) Querier(_ context<span class="hljs-selector-class">.Context</span>, mint, maxt int64) (storage<span class="hljs-selector-class">.Querier</span>, error) &#123;<br><span class="hljs-selector-tag">var</span> blocks []BlockReader<br><br>db<span class="hljs-selector-class">.mtx</span><span class="hljs-selector-class">.RLock</span>()<br>defer db<span class="hljs-selector-class">.mtx</span><span class="hljs-selector-class">.RUnlock</span>()<br><br><span class="hljs-keyword">for</span> _, <span class="hljs-selector-tag">b</span> := range db<span class="hljs-selector-class">.blocks</span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-selector-tag">b</span>.OverlapsClosedInterval(mint, maxt) &#123;<br>blocks = append(blocks, b)<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> maxt &gt;= db<span class="hljs-selector-class">.head</span><span class="hljs-selector-class">.MinTime</span>() &#123;<br>blocks = append(blocks, NewRangeHead(db<span class="hljs-selector-class">.head</span>, mint, maxt))<br>&#125;<br><br>blockQueriers := make([]storage<span class="hljs-selector-class">.Querier</span>, <span class="hljs-number">0</span>, len(blocks))<br><span class="hljs-keyword">for</span> _, <span class="hljs-selector-tag">b</span> := range blocks &#123;<br><span class="hljs-selector-tag">q</span>, err := NewBlockQuerier(<span class="hljs-selector-tag">b</span>, mint, maxt)                      <span class="hljs-comment">//为 block 创建 NewBlockQuerier, 构造函数见下一个代码块</span><br><span class="hljs-keyword">if</span> err == nil &#123;<br>blockQueriers = append(blockQueriers, q)<br>continue<br>&#125;<br><span class="hljs-comment">// If we fail, all previously opened queriers must be closed.</span><br><span class="hljs-keyword">for</span> _, <span class="hljs-selector-tag">q</span> := range blockQueriers &#123;<br><span class="hljs-comment">// TODO(bwplotka): Handle error.</span><br>_ = <span class="hljs-selector-tag">q</span>.Close()<br>&#125;<br>return nil, errors.Wrapf(err, <span class="hljs-string">"open querier for block %s"</span>, b)<br>&#125;<br>return storage.NewMergeQuerier(blockQueriers, nil, storage.ChainedSeriesMerge), nil<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// NewBlockQuerier returns a querier against the block reader and requested min and max time range.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewBlockQuerier</span><span class="hljs-params">(b BlockReader, mint, maxt <span class="hljs-keyword">int64</span>)</span> <span class="hljs-params">(storage.Querier, error)</span></span> &#123;<br>q, err := newBlockBaseQuerier(b, mint, maxt)          <span class="hljs-comment">// newBlockBaseQuerier 构造函数见下一个代码块</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">return</span> &amp;blockQuerier&#123;blockBaseQuerier: q&#125;, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newBlockBaseQuerier</span><span class="hljs-params">(b BlockReader, mint, maxt <span class="hljs-keyword">int64</span>)</span> <span class="hljs-params">(*blockBaseQuerier, error)</span></span> &#123;<br>indexr, err := b.Index()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errors.Wrap(err, <span class="hljs-string">"open index reader"</span>)<br>&#125;<br>chunkr, err := b.Chunks()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>indexr.Close()<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errors.Wrap(err, <span class="hljs-string">"open chunk reader"</span>)<br>&#125;<br>tombsr, err := b.Tombstones()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>indexr.Close()<br>chunkr.Close()<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errors.Wrap(err, <span class="hljs-string">"open tombstone reader"</span>)<br>&#125;<br><br><span class="hljs-keyword">if</span> tombsr == <span class="hljs-literal">nil</span> &#123;<br>tombsr = tombstones.NewMemTombstones()<br>&#125;<br><span class="hljs-keyword">return</span> &amp;blockBaseQuerier&#123;<br>mint:       mint,<br>maxt:       maxt,<br>index:      indexr,<br>chunks:     chunkr,<br>tombstones: tombsr,<br>&#125;, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Querier-通过调用-Select-方法返回-series-set"><a href="#Querier-通过调用-Select-方法返回-series-set" class="headerlink" title="Querier 通过调用 Select 方法返回 series set"></a>Querier 通过调用 Select 方法返回 series set</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs undefined">// Querier provides querying <span class="hljs-keyword">access</span> over time series data <span class="hljs-keyword">of</span> a fixed time <span class="hljs-keyword">range</span>.<br><span class="hljs-keyword">type</span> <span class="hljs-type">Querier </span><span class="hljs-keyword">interface</span> &#123;<br>LabelQuerier<br><br>// <span class="hljs-keyword">Select</span> returns a set <span class="hljs-keyword">of</span> series that matches the given label matchers.<br>// Caller can specify <span class="hljs-keyword">if</span> it requires returned series to be sorted. Prefer <span class="hljs-keyword">not</span> requiring sorting <span class="hljs-keyword">for</span> better performance.<br>// It allows passing hints that can help <span class="hljs-keyword">in</span> optimising <span class="hljs-keyword">select</span>, but it<span class="hljs-symbol">'s</span> up to implementation how this <span class="hljs-keyword">is</span> used <span class="hljs-keyword">if</span> used <span class="hljs-keyword">at</span> <span class="hljs-keyword">all</span>.<br><span class="hljs-keyword">Select</span>(sortSeries bool, hints *SelectHints, matchers ...*labels.Matcher) SeriesSet<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="在-Select-时-会根据-PromQL-中的标签条件进行匹配-最终调用-Postings-方法获得-series-ids"><a href="#在-Select-时-会根据-PromQL-中的标签条件进行匹配-最终调用-Postings-方法获得-series-ids" class="headerlink" title="在 Select 时, 会根据 PromQL 中的标签条件进行匹配, 最终调用 Postings 方法获得 series ids"></a>在 Select 时, 会根据 PromQL 中的标签条件进行匹配, 最终调用 Postings 方法获得 series ids</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs undefined">func (<span class="hljs-selector-tag">q</span> *blockQuerier) Select(sortSeries bool, hints *storage<span class="hljs-selector-class">.SelectHints</span>, ms ...*labels.Matcher) storage<span class="hljs-selector-class">.SeriesSet</span> &#123;<br>mint := <span class="hljs-selector-tag">q</span><span class="hljs-selector-class">.mint</span><br>maxt := <span class="hljs-selector-tag">q</span><span class="hljs-selector-class">.maxt</span><br><span class="hljs-selector-tag">p</span>, err := PostingsForMatchers(<span class="hljs-selector-tag">q</span><span class="hljs-selector-class">.index</span>, ms...)    <span class="hljs-comment">// 在这一步即获得了 postings, 即 series ids, 见下一个代码块</span><br><span class="hljs-keyword">if</span> err != nil &#123;<br>return storage.ErrSeriesSet(err)<br>&#125;<br><span class="hljs-keyword">if</span> sortSeries &#123;<br><span class="hljs-selector-tag">p</span> = <span class="hljs-selector-tag">q</span><span class="hljs-selector-class">.index</span><span class="hljs-selector-class">.SortedPostings</span>(p)<br>&#125;<br><br><span class="hljs-keyword">if</span> hints != nil &#123;<br>mint = hints<span class="hljs-selector-class">.Start</span><br>maxt = hints<span class="hljs-selector-class">.End</span><br><span class="hljs-keyword">if</span> hints<span class="hljs-selector-class">.Func</span> == <span class="hljs-string">"series"</span> &#123;<br><span class="hljs-comment">// When you're only looking up metadata (for example series API), you don't need to load any chunks.</span><br>return newBlockSeriesSet(<span class="hljs-selector-tag">q</span><span class="hljs-selector-class">.index</span>, newNopChunkReader(), <span class="hljs-selector-tag">q</span><span class="hljs-selector-class">.tombstones</span>, <span class="hljs-selector-tag">p</span>, mint, maxt)<br>&#125;<br>&#125;<br><br>return newBlockSeriesSet(<span class="hljs-selector-tag">q</span><span class="hljs-selector-class">.index</span>, <span class="hljs-selector-tag">q</span><span class="hljs-selector-class">.chunks</span>, <span class="hljs-selector-tag">q</span><span class="hljs-selector-class">.tombstones</span>, <span class="hljs-selector-tag">p</span>, mint, maxt)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// PostingsForMatchers assembles a single postings iterator against the index reader</span><br><span class="hljs-comment">// based on the given matchers. The resulting postings are not ordered by series.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PostingsForMatchers</span><span class="hljs-params">(ix IndexReader, ms ...*labels.Matcher)</span> <span class="hljs-params">(index.Postings, error)</span></span> &#123;<br><span class="hljs-keyword">var</span> its, notIts []index.Postings<br><span class="hljs-comment">// See which label must be non-empty.</span><br><span class="hljs-comment">// Optimization for case like &#123;l=~".", l!="1"&#125;.</span><br>labelMustBeSet := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">bool</span>, <span class="hljs-built_in">len</span>(ms))<br><span class="hljs-keyword">for</span> _, m := <span class="hljs-keyword">range</span> ms &#123;<br><span class="hljs-keyword">if</span> !m.Matches(<span class="hljs-string">""</span>) &#123;<br>labelMustBeSet[m.Name] = <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> _, m := <span class="hljs-keyword">range</span> ms &#123;<br><span class="hljs-keyword">if</span> labelMustBeSet[m.Name] &#123;<br><span class="hljs-comment">// If this matcher must be non-empty, we can be smarter.</span><br>matchesEmpty := m.Matches(<span class="hljs-string">""</span>)<br>isNot := m.Type == labels.MatchNotEqual || m.Type == labels.MatchNotRegexp<br><span class="hljs-keyword">if</span> isNot &amp;&amp; matchesEmpty &#123; <span class="hljs-comment">// l!="foo"</span><br><span class="hljs-comment">// If the label can't be empty and is a Not and the inner matcher</span><br><span class="hljs-comment">// doesn't match empty, then subtract it out at the end.</span><br>inverse, err := m.Inverse()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><br>it, err := postingsForMatcher(ix, inverse)                          <span class="hljs-comment">//见下一个代码块</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>notIts = <span class="hljs-built_in">append</span>(notIts, it)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> isNot &amp;&amp; !matchesEmpty &#123; <span class="hljs-comment">// l!=""</span><br><span class="hljs-comment">// If the label can't be empty and is a Not, but the inner matcher can</span><br><span class="hljs-comment">// be empty we need to use inversePostingsForMatcher.</span><br>inverse, err := m.Inverse()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><br>it, err := inversePostingsForMatcher(ix, inverse)            <span class="hljs-comment">//见下下个代码块</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>its = <span class="hljs-built_in">append</span>(its, it)<br>&#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// l="a"</span><br><span class="hljs-comment">// Non-Not matcher, use normal postingsForMatcher.</span><br>it, err := postingsForMatcher(ix, m)                           <span class="hljs-comment">//见下一个代码块</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>its = <span class="hljs-built_in">append</span>(its, it)<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// l=""</span><br><span class="hljs-comment">// If the matchers for a labelname selects an empty value, it selects all</span><br><span class="hljs-comment">// the series which don't have the label name set too. See:</span><br><span class="hljs-comment">// https://github.com/prometheus/prometheus/issues/3575 and</span><br><span class="hljs-comment">// https://github.com/prometheus/prometheus/pull/3578#issuecomment-351653555</span><br>it, err := inversePostingsForMatcher(ix, m)                    <span class="hljs-comment">//见下下个代码块</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>notIts = <span class="hljs-built_in">append</span>(notIts, it)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// If there's nothing to subtract from, add in everything and remove the notIts later.</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(its) == <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">len</span>(notIts) != <span class="hljs-number">0</span> &#123;<br>k, v := index.AllPostingsKey()<br>allPostings, err := ix.Postings(k, v)                          <span class="hljs-comment">//最终都会调用 Postings 方法</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>its = <span class="hljs-built_in">append</span>(its, allPostings)<br>&#125;<br><br>it := index.Intersect(its...)<br><br><span class="hljs-keyword">for</span> _, n := <span class="hljs-keyword">range</span> notIts &#123;<br>it = index.Without(it, n)<br>&#125;<br><br><span class="hljs-keyword">return</span> it, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">postingsForMatcher</span><span class="hljs-params">(ix IndexReader, m *labels.Matcher)</span> <span class="hljs-params">(index.Postings, error)</span></span> &#123;<br><span class="hljs-comment">// This method will not return postings for missing labels.</span><br><br><span class="hljs-comment">// Fast-path for equal matching.</span><br><span class="hljs-keyword">if</span> m.Type == labels.MatchEqual &#123;<br><span class="hljs-keyword">return</span> ix.Postings(m.Name, m.Value)            <span class="hljs-comment">//最终都会调用 Postings 方法</span><br>&#125;<br><br><span class="hljs-comment">// Fast-path for set matching.</span><br><span class="hljs-keyword">if</span> m.Type == labels.MatchRegexp &#123;<br>setMatches := findSetMatches(m.GetRegexString())<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(setMatches) &gt; <span class="hljs-number">0</span> &#123;<br>sort.Strings(setMatches)<br><span class="hljs-keyword">return</span> ix.Postings(m.Name, setMatches...)<br>&#125;<br>&#125;<br><br>vals, err := ix.LabelValues(m.Name)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><br><span class="hljs-keyword">var</span> res []<span class="hljs-keyword">string</span><br>lastVal, isSorted := <span class="hljs-string">""</span>, <span class="hljs-literal">true</span><br><span class="hljs-keyword">for</span> _, val := <span class="hljs-keyword">range</span> vals &#123;<br><span class="hljs-keyword">if</span> m.Matches(val) &#123;<br>res = <span class="hljs-built_in">append</span>(res, val)<br><span class="hljs-keyword">if</span> isSorted &amp;&amp; val &lt; lastVal &#123;<br>isSorted = <span class="hljs-literal">false</span><br>&#125;<br>lastVal = val<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(res) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> index.EmptyPostings(), <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-keyword">if</span> !isSorted &#123;<br>sort.Strings(res)<br>&#125;<br><span class="hljs-keyword">return</span> ix.Postings(m.Name, res...)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// inversePostingsForMatcher returns the postings for the series with the label name set but not matching the matcher.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">inversePostingsForMatcher</span><span class="hljs-params">(ix IndexReader, m *labels.Matcher)</span> <span class="hljs-params">(index.Postings, error)</span></span> &#123;<br>vals, err := ix.LabelValues(m.Name)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><br><span class="hljs-keyword">var</span> res []<span class="hljs-keyword">string</span><br>lastVal, isSorted := <span class="hljs-string">""</span>, <span class="hljs-literal">true</span><br><span class="hljs-keyword">for</span> _, val := <span class="hljs-keyword">range</span> vals &#123;<br><span class="hljs-keyword">if</span> !m.Matches(val) &#123;<br>res = <span class="hljs-built_in">append</span>(res, val)<br><span class="hljs-keyword">if</span> isSorted &amp;&amp; val &lt; lastVal &#123;<br>isSorted = <span class="hljs-literal">false</span><br>&#125;<br>lastVal = val<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> !isSorted &#123;<br>sort.Strings(res)<br>&#125;<br><span class="hljs-keyword">return</span> ix.Postings(m.Name, res...)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="正式开始吧"><a href="#正式开始吧" class="headerlink" title="正式开始吧"></a>正式开始吧</h2><p>如 “前置介绍” 中所说, 在查询时最终都会调用 block 的 postings 方法. 接下来分别对 Head Block 中的 postings 方法和 Persistent Block 中的 postings 方法进行介绍.</p><h3 id="Head-Postings"><a href="#Head-Postings" class="headerlink" title="Head#Postings"></a>Head#Postings</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// Postings returns the postings list iterator for the label pairs.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h *headIndexReader)</span> <span class="hljs-title">Postings</span><span class="hljs-params">(name <span class="hljs-keyword">string</span>, values ...<span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(index.Postings, error)</span></span> &#123;<br>res := <span class="hljs-built_in">make</span>([]index.Postings, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(values))<br><span class="hljs-keyword">for</span> _, value := <span class="hljs-keyword">range</span> values &#123;<br>res = <span class="hljs-built_in">append</span>(res, h.head.postings.Get(name, value))  <span class="hljs-comment">//直接通过 postings.Get 获得</span><br>&#125;<br><span class="hljs-keyword">return</span> index.Merge(res...), <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// Get returns a postings list for the given label pair.</span><br>func (<span class="hljs-selector-tag">p</span> *MemPostings) Get(name, value string) Postings &#123;<br><span class="hljs-selector-tag">var</span> lp []uint64<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.mtx</span><span class="hljs-selector-class">.RLock</span>()<br>l := <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.m</span>[name]<br><span class="hljs-keyword">if</span> l != nil &#123;<br>lp = l[value]<br>&#125;<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.mtx</span><span class="hljs-selector-class">.RUnlock</span>()<br><br><span class="hljs-keyword">if</span> lp == nil &#123;<br>return EmptyPostings()<br>&#125;<br>return newListPostings(lp...)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-comment">// MemPostings holds postings list for series ID per label pair. They may be written</span><br><span class="hljs-comment">// to out of order.</span><br><span class="hljs-comment">// ensureOrder() must be called once before any reads are done. This allows for quick</span><br><span class="hljs-comment">// unordered batch fills on startup.</span><br><span class="hljs-keyword">type</span> MemPostings <span class="hljs-keyword">struct</span> &#123;<br>mtx     sync.RWMutex<br>m       <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>][]<span class="hljs-keyword">uint64</span><br>ordered <span class="hljs-keyword">bool</span><br>&#125;<br></code></pre></td></tr></table></figure><p>总结：Head 的 Postings 方法很简单, 直接通过 mmap 即可获得某个标签键值对的 postings.</p><h3 id="Block-Postings"><a href="#Block-Postings" class="headerlink" title="Block#Postings"></a>Block#Postings</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">func (r blockIndexReader) Postings(name string, values ...string) (index<span class="hljs-selector-class">.Postings</span>, error) &#123;<br><span class="hljs-selector-tag">p</span>, err := r<span class="hljs-selector-class">.ir</span><span class="hljs-selector-class">.Postings</span>(name, values...)        <span class="hljs-comment">// 调用 Index 的 Postings</span><br><span class="hljs-keyword">if</span> err != nil &#123;<br>return <span class="hljs-selector-tag">p</span>, errors.Wrapf(err, <span class="hljs-string">"block: %s"</span>, r<span class="hljs-selector-class">.b</span><span class="hljs-selector-class">.Meta</span>().ULID)<br>&#125;<br>return <span class="hljs-selector-tag">p</span>, nil<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *Reader)</span> <span class="hljs-title">Postings</span><span class="hljs-params">(name <span class="hljs-keyword">string</span>, values ...<span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(Postings, error)</span></span> &#123;<br><span class="hljs-keyword">if</span> r.version == FormatV1 &#123;          <span class="hljs-comment">// 我们现在应该是 V2, 可忽略</span><br>e, ok := r.postingsV1[name]<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span> EmptyPostings(), <span class="hljs-literal">nil</span><br>&#125;<br>res := <span class="hljs-built_in">make</span>([]Postings, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(values))<br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> values &#123;<br>postingsOff, ok := e[v]<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-comment">// Read from the postings table.</span><br>d := encoding.NewDecbufAt(r.b, <span class="hljs-keyword">int</span>(postingsOff), castagnoliTable)<br>_, p, err := r.dec.Postings(d.Get())<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errors.Wrap(err, <span class="hljs-string">"decode postings"</span>)<br>&#125;<br>res = <span class="hljs-built_in">append</span>(res, p)<br>&#125;<br><span class="hljs-keyword">return</span> Merge(res...), <span class="hljs-literal">nil</span><br>&#125;<br><br>e, ok := r.postings[name]       <span class="hljs-comment">// Reader 的内容见下一个代码块, 即获得该 label 在 offset table 中的开始位置</span><br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span> EmptyPostings(), <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(values) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> EmptyPostings(), <span class="hljs-literal">nil</span><br>&#125;<br><br>res := <span class="hljs-built_in">make</span>([]Postings, <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(values))<br>skip := <span class="hljs-number">0</span><br>valueIndex := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> valueIndex &lt; <span class="hljs-built_in">len</span>(values) &amp;&amp; values[valueIndex] &lt; e[<span class="hljs-number">0</span>].value &#123; <span class="hljs-comment">// 遍历直至找到开始的位置.</span><br><span class="hljs-comment">// 根据上文的宏观介绍, offset table 中 label 的 key 和 value 都是有序的</span><br><span class="hljs-comment">// 因此 values[valueIndex] &lt; e[0].value 即代表查询的标签值在当前 block 中不存在/未命中</span><br><br><span class="hljs-comment">// Discard values before the start.</span><br>valueIndex++<br>&#125;<br><span class="hljs-keyword">for</span> valueIndex &lt; <span class="hljs-built_in">len</span>(values) &#123;<br>value := values[valueIndex]<br><br>        <span class="hljs-comment">//二分查找</span><br>i := sort.Search(<span class="hljs-built_in">len</span>(e), <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(i <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">bool</span></span> &#123; <span class="hljs-keyword">return</span> e[i].value &gt;= value &#125;)<br>  <br><span class="hljs-keyword">if</span> i == <span class="hljs-built_in">len</span>(e) &#123;<br><span class="hljs-comment">// We're past the end.</span><br><span class="hljs-keyword">break</span><br>&#125;<br><span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">0</span> &amp;&amp; e[i].value != value &#123;<br><span class="hljs-comment">// Need to look from previous entry.</span><br>i--<br>&#125;<br><span class="hljs-comment">// Don't Crc32 the entire postings offset table, this is very slow</span><br><span class="hljs-comment">// so hope any issues were caught at startup.</span><br>d := encoding.NewDecbufAt(r.b, <span class="hljs-keyword">int</span>(r.toc.PostingsTable), <span class="hljs-literal">nil</span>)<br>d.Skip(e[i].off)<br><br><span class="hljs-comment">// Iterate on the offset table.</span><br><span class="hljs-keyword">var</span> postingsOff <span class="hljs-keyword">uint64</span> <span class="hljs-comment">// The offset into the postings table.</span><br><span class="hljs-keyword">for</span> d.Err() == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> skip == <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// These are always the same number of bytes,</span><br><span class="hljs-comment">// and it's faster to skip than parse.</span><br>skip = d.Len()<br>d.Uvarint()      <span class="hljs-comment">// Keycount.</span><br>d.UvarintBytes() <span class="hljs-comment">// Label name.</span><br>skip -= d.Len()<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>d.Skip(skip)<br>&#125;<br>v := d.UvarintBytes()       <span class="hljs-comment">// Label value.</span><br>postingsOff = d.Uvarint64() <span class="hljs-comment">// Offset.</span><br><span class="hljs-keyword">for</span> <span class="hljs-keyword">string</span>(v) &gt;= value &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">string</span>(v) == value &#123;  <span class="hljs-comment">// 如果标签值匹配上了</span><br><span class="hljs-comment">// Read from the postings table.</span><br>d2 := encoding.NewDecbufAt(r.b, <span class="hljs-keyword">int</span>(postingsOff), castagnoliTable)<br>_, p, err := r.dec.Postings(d2.Get())    <span class="hljs-comment">// 解码</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errors.Wrap(err, <span class="hljs-string">"decode postings"</span>)<br>&#125;<br>res = <span class="hljs-built_in">append</span>(res, p)    <span class="hljs-comment">// postings 加入 result list</span><br>&#125;<br>valueIndex++<br><span class="hljs-keyword">if</span> valueIndex == <span class="hljs-built_in">len</span>(values) &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>value = values[valueIndex]<br>&#125;<br><span class="hljs-keyword">if</span> i+<span class="hljs-number">1</span> == <span class="hljs-built_in">len</span>(e) || value &gt;= e[i+<span class="hljs-number">1</span>].value || valueIndex == <span class="hljs-built_in">len</span>(values) &#123;<br><span class="hljs-comment">// Need to go to a later postings offset entry, if there is one.</span><br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> d.Err() != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errors.Wrap(d.Err(), <span class="hljs-string">"get postings offset entry"</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> Merge(res...), <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs undefined"><span class="hljs-keyword">type</span> Reader <span class="hljs-keyword">struct</span> &#123;<br>b   ByteSlice<br>toc *TOC<br><br><span class="hljs-comment">// Close that releases the underlying resources of the byte slice.</span><br>c io.Closer<br><br><span class="hljs-comment">// Map of LabelName to a list of some LabelValues's position in the offset table.</span><br><span class="hljs-comment">// The first and last values for each name are always present.</span><br>postings <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>][]postingOffset<br><span class="hljs-comment">// For the v1 format, labelname -&gt; labelvalue -&gt; offset.</span><br>postingsV1 <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">uint64</span><br><br>symbols     *Symbols<br>nameSymbols <span class="hljs-keyword">map</span>[<span class="hljs-keyword">uint32</span>]<span class="hljs-keyword">string</span> <span class="hljs-comment">// Cache of the label name symbol lookups,</span><br><span class="hljs-comment">// as there are not many and they are half of all lookups.</span><br><br>dec *Decoder<br><br>version <span class="hljs-keyword">int</span><br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>通过 postings[name] 获得 label name 所对应的 values 的在 offset table 中开始的位置</li><li>首先根据上述 “开始的位置” 的标签的值过滤掉未命中的 label values（因为有序）</li><li>遍历所有需要查询的标签值<ul><li>在 offset table 中进行二分查找, 找到当前标签值在 offset table 中的上界（上界是标签值, 或者前一个是标签值, 或者 miss）</li><li>通过 toc 找到 posting offet table， 通过上边找到的 offset 获得对应的 series ids</li><li>通过 series ids 反解出原始的标签值<ul><li>原始标签值与要查找的标签值对比</li><li>如果相等则把该 series id 加入到 res 中</li><li>不相等则说明二分查找 miss</li></ul></li></ul></li><li>merge res</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://prometheus.io/docs/prometheus/latest/storage/" target="_blank" rel="noopener">https://prometheus.io/docs/prometheus/latest/storage/</a></li><li><a href="https://fabxc.org/tsdb/" target="_blank" rel="noopener">https://fabxc.org/tsdb/</a></li><li><a href="https://ganeshvernekar.com/blog/prometheus-tsdb-the-head-block" target="_blank" rel="noopener">https://ganeshvernekar.com/blog/prometheus-tsdb-the-head-block</a></li><li><a href="https://ganeshvernekar.com/blog/prometheus-tsdb-persistent-block-and-its-index" target="_blank" rel="noopener">https://ganeshvernekar.com/blog/prometheus-tsdb-persistent-block-and-its-index</a></li><li><a href="https://github.com/prometheus/prometheus/blob/master/tsdb/docs/format/index.md" target="_blank" rel="noopener">https://github.com/prometheus/prometheus/blob/master/tsdb/docs/format/index.md</a></li><li><a href="https://github.com/prometheus/prometheus/blob/master/tsdb/head.go" target="_blank" rel="noopener">https://github.com/prometheus/prometheus/blob/master/tsdb/head.go</a></li><li><a href="https://github.com/prometheus/prometheus/blob/2c4a4548a8382f7c8966dbfda37f34c43151e316/storage/series.go" target="_blank" rel="noopener">https://github.com/prometheus/prometheus/blob/2c4a4548a8382f7c8966dbfda37f34c43151e316/storage/series.go</a></li><li><a href="https://github.com/prometheus/prometheus/tree/a282d2509971174301408c5a5f96946c478dfb0f/tsdb/index" target="_blank" rel="noopener">https://github.com/prometheus/prometheus/tree/a282d2509971174301408c5a5f96946c478dfb0f/tsdb/index</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>prometheus</tag>
      
      <tag>大监控</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我为什么会惆怅</title>
    <link href="/2019/09/15/2019-9-15/"/>
    <url>/2019/09/15/2019-9-15/</url>
    
    <content type="html"><![CDATA[<p>中秋三天假，这么快就过去了</p><p>发现假期越长，临近假期结束时就越惆怅</p><p>大概是因为快乐而梦幻的时光这么快就结束，接下来又要面临挑战，反差太大，很难接受吧</p><p>不禁开始担心接下来的国庆节，在最后的一两天时，会有多失落啊</p><p>突然想起了《赤壁赋》：</p><blockquote><p>于是饮酒乐甚，扣舷而歌之。</p><p>歌曰：“桂棹兮兰桨，击空明兮溯流光。</p><p>渺渺兮予怀，望美人兮天一方。”</p><p>客有吹洞箫者，倚歌而和之。</p><p>其声呜呜然，如怨如慕，如泣如诉，余音袅袅，不绝如缕。</p><p>舞幽壑之潜蛟，泣孤舟之嫠妇。</p></blockquote><p>往往在欢乐的时光，想起难过的事情，会更难过吧</p><p>其实，我觉得文章中，苏子劝客的一番话，真的很扯淡</p><p>那为什么“客喜而笑，洗盏更酌”呢？</p><p>面对如此真实的人生，不如此又能怎样呢，或许还不如享受当下</p><p>社会中，生活享受的人与生活煎熬的人，比例大概远远小于二与八</p><p>“肴核既尽，杯盘狼籍。相与枕藉乎舟中，不知东方之既白。”</p><p>看来我也是经常这样了，夜晚一个人在住处喝啤酒，看视频，真的是麻木的快乐，然后睡去….</p><p>醒来时已经是第二天的九十点钟了</p><p>但是，麻木的快乐之后的生活，又会是怎样的呢, 该如何面对呢 ？</p><p>这就是我为什么会惆怅</p>]]></content>
    
    
    <categories>
      
      <category>life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
